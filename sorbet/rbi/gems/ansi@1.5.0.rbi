# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ansi` gem.
# Please instead update this file by running `bin/tapioca gem ansi`.

# typed: true

module ANSI
  extend ::ANSI::Constants
  extend ::ANSI::Code

  class << self
    def const_missing(name); end
    def metadata; end
    def string(str); end
  end
end

module ANSI::BBCode
  class << self
    def ansi(colorname); end
    def ansi_to_bbcode(string); end
    def ansi_to_html(string); end
    def bbcode_to_ansi(string, usecolors = T.unsafe(nil)); end
    def bbcode_to_html(string); end
    def html_to_ansi(string); end
    def html_to_bbcode(string); end
    def strip_bbcode(string); end
  end
end

ANSI::BBCode::ANSINAME2BBCODE = T.let(T.unsafe(nil), Hash)
ANSI::BBCode::ANSINAME2CODE = T.let(T.unsafe(nil), Hash)
ANSI::BBCode::BBCOLOR2ANSI = T.let(T.unsafe(nil), Hash)
ANSI::CHART = T.let(T.unsafe(nil), Hash)

class ANSI::Chain
  def initialize(string); end

  def codes; end
  def method_missing(s, *a, &b); end
  def string; end
  def to_s; end
  def to_str; end
end

module ANSI::Code
  include ::ANSI::Constants
  extend ::ANSI::Code

  def [](*codes); end
  def ansi(*codes); end
  def back(spaces = T.unsafe(nil)); end
  def black_on_black(string = T.unsafe(nil)); end
  def black_on_blue(string = T.unsafe(nil)); end
  def black_on_cyan(string = T.unsafe(nil)); end
  def black_on_green(string = T.unsafe(nil)); end
  def black_on_magenta(string = T.unsafe(nil)); end
  def black_on_red(string = T.unsafe(nil)); end
  def black_on_white(string = T.unsafe(nil)); end
  def black_on_yellow(string = T.unsafe(nil)); end
  def blue_on_black(string = T.unsafe(nil)); end
  def blue_on_blue(string = T.unsafe(nil)); end
  def blue_on_cyan(string = T.unsafe(nil)); end
  def blue_on_green(string = T.unsafe(nil)); end
  def blue_on_magenta(string = T.unsafe(nil)); end
  def blue_on_red(string = T.unsafe(nil)); end
  def blue_on_white(string = T.unsafe(nil)); end
  def blue_on_yellow(string = T.unsafe(nil)); end
  def code(*codes); end
  def color(*codes); end
  def cyan_on_black(string = T.unsafe(nil)); end
  def cyan_on_blue(string = T.unsafe(nil)); end
  def cyan_on_cyan(string = T.unsafe(nil)); end
  def cyan_on_green(string = T.unsafe(nil)); end
  def cyan_on_magenta(string = T.unsafe(nil)); end
  def cyan_on_red(string = T.unsafe(nil)); end
  def cyan_on_white(string = T.unsafe(nil)); end
  def cyan_on_yellow(string = T.unsafe(nil)); end
  def display(line, column = T.unsafe(nil)); end
  def down(spaces = T.unsafe(nil)); end
  def forward(spaces = T.unsafe(nil)); end
  def green_on_black(string = T.unsafe(nil)); end
  def green_on_blue(string = T.unsafe(nil)); end
  def green_on_cyan(string = T.unsafe(nil)); end
  def green_on_green(string = T.unsafe(nil)); end
  def green_on_magenta(string = T.unsafe(nil)); end
  def green_on_red(string = T.unsafe(nil)); end
  def green_on_white(string = T.unsafe(nil)); end
  def green_on_yellow(string = T.unsafe(nil)); end
  def hex_code(string, background = T.unsafe(nil)); end
  def left(spaces = T.unsafe(nil)); end
  def magenta_on_black(string = T.unsafe(nil)); end
  def magenta_on_blue(string = T.unsafe(nil)); end
  def magenta_on_cyan(string = T.unsafe(nil)); end
  def magenta_on_green(string = T.unsafe(nil)); end
  def magenta_on_magenta(string = T.unsafe(nil)); end
  def magenta_on_red(string = T.unsafe(nil)); end
  def magenta_on_white(string = T.unsafe(nil)); end
  def magenta_on_yellow(string = T.unsafe(nil)); end
  def method_missing(code, *args, &blk); end
  def move(line, column = T.unsafe(nil)); end
  def random(background = T.unsafe(nil)); end
  def red_on_black(string = T.unsafe(nil)); end
  def red_on_blue(string = T.unsafe(nil)); end
  def red_on_cyan(string = T.unsafe(nil)); end
  def red_on_green(string = T.unsafe(nil)); end
  def red_on_magenta(string = T.unsafe(nil)); end
  def red_on_red(string = T.unsafe(nil)); end
  def red_on_white(string = T.unsafe(nil)); end
  def red_on_yellow(string = T.unsafe(nil)); end
  def rgb(*args); end
  def rgb_256(r, g, b); end
  def rgb_code(red, green, blue, background = T.unsafe(nil)); end
  def right(spaces = T.unsafe(nil)); end
  def style(*codes); end
  def unansi(string = T.unsafe(nil)); end
  def uncolor(string = T.unsafe(nil)); end
  def unstyle(string = T.unsafe(nil)); end
  def up(spaces = T.unsafe(nil)); end
  def white_on_black(string = T.unsafe(nil)); end
  def white_on_blue(string = T.unsafe(nil)); end
  def white_on_cyan(string = T.unsafe(nil)); end
  def white_on_green(string = T.unsafe(nil)); end
  def white_on_magenta(string = T.unsafe(nil)); end
  def white_on_red(string = T.unsafe(nil)); end
  def white_on_white(string = T.unsafe(nil)); end
  def white_on_yellow(string = T.unsafe(nil)); end
  def yellow_on_black(string = T.unsafe(nil)); end
  def yellow_on_blue(string = T.unsafe(nil)); end
  def yellow_on_cyan(string = T.unsafe(nil)); end
  def yellow_on_green(string = T.unsafe(nil)); end
  def yellow_on_magenta(string = T.unsafe(nil)); end
  def yellow_on_red(string = T.unsafe(nil)); end
  def yellow_on_white(string = T.unsafe(nil)); end
  def yellow_on_yellow(string = T.unsafe(nil)); end

  class << self
    def colors; end
    def styles; end
  end
end

ANSI::Code::ENDCODE = T.let(T.unsafe(nil), String)
ANSI::Code::PATTERN = T.let(T.unsafe(nil), Regexp)

class ANSI::Columns
  def initialize(list, options = T.unsafe(nil), &format); end

  def align; end
  def align=(symbol); end
  def columns; end
  def columns=(integer); end
  def format; end
  def format=(procedure); end
  def inspect; end
  def join(cols = T.unsafe(nil)); end
  def list; end
  def list=(list); end
  def padding; end
  def padding=(pad); end
  def to_s(cols = T.unsafe(nil)); end

  private

  def ansi_formatting(cell, col, row); end
  def template(max, pad); end
  def to_s_columns(columns = T.unsafe(nil)); end
end

module ANSI::Constants; end
ANSI::Constants::BLACK = T.let(T.unsafe(nil), String)
ANSI::Constants::BLINK = T.let(T.unsafe(nil), String)
ANSI::Constants::BLINK_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::BLUE = T.let(T.unsafe(nil), String)
ANSI::Constants::BOLD = T.let(T.unsafe(nil), String)
ANSI::Constants::BOLD_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::BRIGHT = T.let(T.unsafe(nil), String)
ANSI::Constants::BRIGHT_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::CLEAN = T.let(T.unsafe(nil), String)
ANSI::Constants::CLEAR = T.let(T.unsafe(nil), String)
ANSI::Constants::CLEAR_EOL = T.let(T.unsafe(nil), String)
ANSI::Constants::CLEAR_LEFT = T.let(T.unsafe(nil), String)
ANSI::Constants::CLEAR_LINE = T.let(T.unsafe(nil), String)
ANSI::Constants::CLEAR_RIGHT = T.let(T.unsafe(nil), String)
ANSI::Constants::CLEAR_SCREEN = T.let(T.unsafe(nil), String)
ANSI::Constants::CLR = T.let(T.unsafe(nil), String)
ANSI::Constants::CLS = T.let(T.unsafe(nil), String)
ANSI::Constants::CONCEAL = T.let(T.unsafe(nil), String)
ANSI::Constants::CONCEALED = T.let(T.unsafe(nil), String)
ANSI::Constants::CONCEAL_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::CROSSED_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::CROSSED_OUT_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::CURSOR_HIDE = T.let(T.unsafe(nil), String)
ANSI::Constants::CURSOR_SHOW = T.let(T.unsafe(nil), String)
ANSI::Constants::CYAN = T.let(T.unsafe(nil), String)
ANSI::Constants::DARK = T.let(T.unsafe(nil), String)
ANSI::Constants::DEFAULT_FONT = T.let(T.unsafe(nil), String)
ANSI::Constants::DOUBLE_UNDERLINE = T.let(T.unsafe(nil), String)
ANSI::Constants::ENCIRCLE = T.let(T.unsafe(nil), String)
ANSI::Constants::ENCIRCLE_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::FAINT = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT0 = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT1 = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT2 = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT3 = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT4 = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT5 = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT6 = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT7 = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT8 = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT9 = T.let(T.unsafe(nil), String)
ANSI::Constants::FONT_DEFAULT = T.let(T.unsafe(nil), String)
ANSI::Constants::FRAKTUR = T.let(T.unsafe(nil), String)
ANSI::Constants::FRAKTUR_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::FRAME = T.let(T.unsafe(nil), String)
ANSI::Constants::FRAME_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::GREEN = T.let(T.unsafe(nil), String)
ANSI::Constants::HIDE = T.let(T.unsafe(nil), String)
ANSI::Constants::INVERSE = T.let(T.unsafe(nil), String)
ANSI::Constants::INVERSE_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::INVERT = T.let(T.unsafe(nil), String)
ANSI::Constants::ITALIC = T.let(T.unsafe(nil), String)
ANSI::Constants::ITALIC_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::MAGENTA = T.let(T.unsafe(nil), String)
ANSI::Constants::NEGATIVE = T.let(T.unsafe(nil), String)
ANSI::Constants::ON_BLACK = T.let(T.unsafe(nil), String)
ANSI::Constants::ON_BLUE = T.let(T.unsafe(nil), String)
ANSI::Constants::ON_CYAN = T.let(T.unsafe(nil), String)
ANSI::Constants::ON_GREEN = T.let(T.unsafe(nil), String)
ANSI::Constants::ON_MAGENTA = T.let(T.unsafe(nil), String)
ANSI::Constants::ON_RED = T.let(T.unsafe(nil), String)
ANSI::Constants::ON_WHITE = T.let(T.unsafe(nil), String)
ANSI::Constants::ON_YELLOW = T.let(T.unsafe(nil), String)
ANSI::Constants::OVERLINE = T.let(T.unsafe(nil), String)
ANSI::Constants::OVERLINE_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::POSITIVE = T.let(T.unsafe(nil), String)
ANSI::Constants::RAPID = T.let(T.unsafe(nil), String)
ANSI::Constants::RAPID_BLINK = T.let(T.unsafe(nil), String)
ANSI::Constants::RED = T.let(T.unsafe(nil), String)
ANSI::Constants::RESET = T.let(T.unsafe(nil), String)
ANSI::Constants::RESTORE = T.let(T.unsafe(nil), String)
ANSI::Constants::REVEAL = T.let(T.unsafe(nil), String)
ANSI::Constants::REVERSE = T.let(T.unsafe(nil), String)
ANSI::Constants::SAVE = T.let(T.unsafe(nil), String)
ANSI::Constants::SHOW = T.let(T.unsafe(nil), String)
ANSI::Constants::SLOW_BLINK = T.let(T.unsafe(nil), String)
ANSI::Constants::STRIKE = T.let(T.unsafe(nil), String)
ANSI::Constants::SWAP = T.let(T.unsafe(nil), String)
ANSI::Constants::UNDERLINE = T.let(T.unsafe(nil), String)
ANSI::Constants::UNDERLINE_OFF = T.let(T.unsafe(nil), String)
ANSI::Constants::UNDERSCORE = T.let(T.unsafe(nil), String)
ANSI::Constants::WHITE = T.let(T.unsafe(nil), String)
ANSI::Constants::YELLOW = T.let(T.unsafe(nil), String)

class ANSI::Diff
  def initialize(object1, object2, options = T.unsafe(nil)); end

  def diff1; end
  def diff2; end
  def join(separator = T.unsafe(nil)); end
  def to_a; end
  def to_s; end

  private

  def common(x, y); end
  def compare(x, y); end
  def convert(object); end
  def diff_string(string1, string2); end
  def lcs(s1, s2); end
  def lcs_size(s1, s2); end

  class << self
    def diff(object1, object2, options = T.unsafe(nil)); end
  end
end

ANSI::Diff::COLORS = T.let(T.unsafe(nil), Array)

class ANSI::Logger < ::Logger
  def ansicolor=(on); end
  def ansicolor?; end
  def debug(progname = T.unsafe(nil), &block); end
  def error(progname = T.unsafe(nil), &block); end
  def fatal(progname = T.unsafe(nil), &block); end
  def formatter(&block); end
  def info(progname = T.unsafe(nil), &block); end
  def styles(options = T.unsafe(nil)); end
  def warn(progname = T.unsafe(nil), &block); end

  private

  def debug_with_color; end
  def error_with_color; end
  def fatal_with_color; end
  def info_with_color; end
  def warn_with_color; end
end

ANSI::Logger::DETAILED_FORMAT = T.let(T.unsafe(nil), String)
ANSI::Logger::SIMPLE_FORMAT = T.let(T.unsafe(nil), String)

module ANSI::Mixin
  def black; end
  def black_on_blue; end
  def black_on_cyan; end
  def black_on_green; end
  def black_on_magenta; end
  def black_on_red; end
  def black_on_white; end
  def black_on_yellow; end
  def blink; end
  def blue; end
  def blue_on_black; end
  def blue_on_cyan; end
  def blue_on_green; end
  def blue_on_magenta; end
  def blue_on_red; end
  def blue_on_white; end
  def blue_on_yellow; end
  def bold; end
  def concealed; end
  def cyan; end
  def cyan_on_black; end
  def cyan_on_blue; end
  def cyan_on_green; end
  def cyan_on_magenta; end
  def cyan_on_red; end
  def cyan_on_white; end
  def cyan_on_yellow; end
  def dark; end
  def display(line, column = T.unsafe(nil)); end
  def green; end
  def green_on_black; end
  def green_on_blue; end
  def green_on_cyan; end
  def green_on_magenta; end
  def green_on_red; end
  def green_on_white; end
  def green_on_yellow; end
  def italic; end
  def magenta; end
  def magenta_on_black; end
  def magenta_on_blue; end
  def magenta_on_cyan; end
  def magenta_on_green; end
  def magenta_on_red; end
  def magenta_on_white; end
  def magenta_on_yellow; end
  def negative; end
  def on_black; end
  def on_blue; end
  def on_cyan; end
  def on_green; end
  def on_magenta; end
  def on_red; end
  def on_white; end
  def on_yellow; end
  def rapid; end
  def red; end
  def red_on_black; end
  def red_on_blue; end
  def red_on_cyan; end
  def red_on_green; end
  def red_on_magenta; end
  def red_on_white; end
  def red_on_yellow; end
  def reverse; end
  def strike; end
  def underline; end
  def underscore; end
  def white; end
  def white_on_black; end
  def white_on_blue; end
  def white_on_cyan; end
  def white_on_green; end
  def white_on_magenta; end
  def white_on_red; end
  def white_on_yellow; end
  def yellow; end
  def yellow_on_black; end
  def yellow_on_blue; end
  def yellow_on_cyan; end
  def yellow_on_green; end
  def yellow_on_magenta; end
  def yellow_on_red; end
  def yellow_on_white; end
end

class ANSI::ProgressBar
  def initialize(title, total, out = T.unsafe(nil)); end

  def bar_mark=(mark); end
  def barmark=(mark); end
  def clear; end
  def file_transfer_mode; end
  def finish; end
  def flush; end
  def format(format, *arguments); end
  def format=(_arg0); end
  def format_arguments; end
  def format_arguments=(_arg0); end
  def halt; end
  def inc(step = T.unsafe(nil)); end
  def inspect; end
  def mark=(mark); end
  def reset; end
  def set(count); end
  def standard_mode; end
  def style(options); end
  def styles; end
  def styles=(_arg0); end
  def title=(str); end
  def total_overflow=(boolv); end
  def transfer_mode; end

  private

  def bar; end
  def bytes; end
  def colorize(part, style); end
  def convert_bytes(bytes); end
  def elapsed; end
  def eol; end
  def eta; end
  def format_time(t); end
  def get_width; end
  def percentage; end
  def show; end
  def show_progress; end
  def stat; end
  def stat_for_file_transfer; end
  def title; end
  def transfer_rate; end
end

ANSI::Progressbar = ANSI::ProgressBar
ANSI::SPECIAL_CHART = T.let(T.unsafe(nil), Hash)

class ANSI::String
  def initialize(text = T.unsafe(nil), marks = T.unsafe(nil)); end

  def +(other); end
  def [](*args); end
  def ansi(code); end
  def ansi!(code); end
  def black; end
  def black!; end
  def blue; end
  def blue!; end
  def bold; end
  def bold!; end
  def color(code); end
  def color!(code); end
  def cyan; end
  def cyan!; end
  def downcase; end
  def downcase!; end
  def green; end
  def green!; end
  def gsub(pattern, replacement = T.unsafe(nil), &block); end
  def gsub!(pattern, replacement = T.unsafe(nil), &block); end
  def magenta; end
  def magenta!; end
  def marks; end
  def red; end
  def red!; end
  def size; end
  def slice(*args); end
  def sub(pattern, replacement = T.unsafe(nil), &block); end
  def sub!(pattern, replacement = T.unsafe(nil), &block); end
  def text; end
  def to_s; end
  def to_str; end
  def underline; end
  def underline!; end
  def upcase; end
  def upcase!; end
  def yellow; end
  def yellow!; end

  private

  def shift_marks(index, delta, marks = T.unsafe(nil)); end
  def shift_marks!(index, delta); end
end

ANSI::String::CLR = T.let(T.unsafe(nil), String)

class ANSI::Table
  def initialize(table, options = T.unsafe(nil), &format); end

  def align; end
  def align=(_arg0); end
  def border; end
  def border=(_arg0); end
  def fit; end
  def fit=(_arg0); end
  def format; end
  def format=(_arg0); end
  def padding; end
  def padding=(_arg0); end
  def table; end
  def table=(_arg0); end
  def to_s; end

  private

  def ansi_formating(cell, col, row); end
  def apply_format(str, cell, col, row); end
  def cell_template(max); end
  def column_size; end
  def dividing_line; end
  def fit_width; end
  def max_columns(fit = T.unsafe(nil)); end
end

module ANSI::Terminal
  private

  def get_character(input = T.unsafe(nil)); end
  def raw_no_echo_mode; end
  def restore_mode; end
  def terminal_height; end
  def terminal_size; end
  def terminal_width; end

  class << self
    def get_character(input = T.unsafe(nil)); end
    def raw_no_echo_mode; end
    def restore_mode; end
    def terminal_height; end
    def terminal_size; end
    def terminal_width; end
  end
end

ANSI::Terminal::CHARACTER_MODE = T.let(T.unsafe(nil), String)

class Logger
  include ::Logger::Severity
end

class Logger::LogDevice
  include ::Logger::Period
  include ::MonitorMixin

  def ansicolor=(_arg0); end
  def ansicolor?; end
end

Logger::SEV_LABEL = T.let(T.unsafe(nil), Array)

class String
  include ::Comparable
  include ::JSON::Ext::Generator::GeneratorMethods::String
  extend ::JSON::Ext::Generator::GeneratorMethods::String::Extend

  def ansi(*codes); end
  def ansi!(*codes); end
  def unansi; end
  def unansi!; end
end
